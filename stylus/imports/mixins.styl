size(width, height = width)
  width width
  height height

min-size(width, height = width)
  min-width width
  min-height height

max-size(width, height = width)
  max-width width
  max-height height

get-percent-size(size, base-size)
  (size / base-size * 100)%

get-img-size(imgpath)
  if match('^.+(htdocs).+$', imgpath)
    img-size = image-size(imgpath)
    return {
      width : img-size[0]
      height: img-size[1]
    }
  else
    return {
      width : sprite-hash[imgpath].width
      height: sprite-hash[imgpath].height
    }

centering(width = null, height = width)
  if width
    margin (width / -2)px 0 0 (width / -2)px
  else
    transform translateX(-50%) translateY(-50%)
  absolute top 50% left 50%

aspect-ratio(width-or-imgpath, height = null)
  if typeof(width-or-imgpath) is 'string'
    img-size = get-img-size(width-or-imgpath)
    width  = img-size.width
    height = img-size.height
  else
    width = width-or-imgpath
  position relative
  &::before
    content ""
    display block
    padding-top get-percent-size(height, width)
  > *
    position absolute

img-replace(indent-dir = 'left')
  if indent-dir is 'left'
    indent-dir-num = -100%
  else if indent-dir is 'right'
    indent-dir-num = 100%
  overflow hidden
  text-indent indent-dir-num
  white-space nowrap

triangle(shape = 'left', size = 10px, color = #000, positions = {})
  default-positions = { top: auto, right: auto, bottom: auto, left: auto }
  positions = merge(default-positions, positions)
  content ""
  display block
  width 0
  height 0
  if shape is 'top'
    colors = transparent transparent color
  else if shape is 'left'
    colors = transparent color transparent transparent
  else if shape is 'bottom'
    colors = color transparent transparent
  else if shape is 'right'
    colors = transparent transparent transparent color
  else if shape is 'topLeft'
    colors = color transparent transparent color
  else if shape is 'topRight'
    colors = color color transparent transparent
  else if shape is 'bottomRight'
    colors = transparent color color transparent
  else if shape is 'bottomLeft'
    colors = transparent transparent color color
  border-width size
  border-style solid
  border-color colors
  position absolute
  for prop, pos in positions
    {prop} pos


// ==============================
// animations
// ==============================

sprite-fade-hover(image, opts = {})
  default-opts = {
    duration    : .2
    crossFade   : false
    suffixBefore: '-off'
    suffixAfter : '-on'
  }
  opts = merge(default-opts, opts)
  image-size = get-img-size(image + opts.suffixBefore + '.png')
  width : (image-size.width)px
  height: (image-size.height)px
  position relative
  animation: delayView (opts.duration)s linear
  &::before, &::after
    content ''
    display block
    absolute top 0 left 0
  &::before
    sprite(image + opts.suffixBefore + '.png')
    if opts.crossFade
      animation: fadeIn (opts.duration)s linear
  &::after
    opacity 0
    sprite(image + opts.suffixAfter + '.png')
    animation: fadeOut (opts.duration)s linear
  &:hover
    if opts.crossFade
      &::before
        opacity 0
        animation: fadeOut (opts.duration)s linear
    &::after
      opacity 1
      animation: fadeIn (opts.duration)s linear

// @example
// ----------
// create-keyframes(sampleAnime, 3, 10, {
//     '0': { opacity: 1 },
//    '50': { opacity: 0 },
//   '100': { opacity: 1 }
// })
// ----------
create-keyframes(name, duration, interval, animationHash)
  @keyframes name
    durationRatio = duration / (duration + interval)
    for progress, cssHash in animationHash
      {durationRatio * progress}{unquote('%')}
        for key, val in cssHash
          {key} val


// ==============================
// nib override
// ==============================

opacity(val)
  opacity val


// ==============================
// polyfiles
// ==============================
